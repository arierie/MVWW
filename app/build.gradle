plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'jacoco-android'
}

android {
    compileSdkVersion Config.compileVersion
    buildToolsVersion Config.buildTools
    defaultConfig {
        applicationId Config.packageName
        minSdkVersion Config.minVersion
        targetSdkVersion Config.targetVersion
        versionCode Config.versionCode
        versionName Config.versionName
        testInstrumentationRunner Config.testRunner
        multiDexEnabled true
    }
    buildTypes {
        release {
            testCoverageEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"http://api.themoviedb.org/3/\""
            buildConfigField 'String', "ApiKey", "765e4945e78f4a4497cd97a5734894d9" // TODO change it to your API_KEY
        }
        debug {
            testCoverageEnabled true
            buildConfigField "String", "BASE_URL", "\"http://api.themoviedb.org/3/\""
            buildConfigField 'String', "ApiKey", "\"765e4945e78f4a4497cd97a5734894d9\"" // TODO change it to your API_KEY
        }
    }
    testOptions {
        animationsDisabled true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Deps.kotlinLib
    implementation Deps.kotlinJunitTest

    implementation Deps.constraintLayout
    implementation Deps.recyclerView
    implementation Deps.cardView
    implementation Deps.material

    implementation Deps.dagger
    implementation Deps.daggerAndroid
    implementation Deps.daggerAndroidSupport

    kapt Deps.daggerCompiler
    kapt Deps.daggerAndroidProcessor

    kaptTest Deps.daggerCompiler
    kaptTest Deps.daggerAndroidProcessor

    implementation Deps.glide
    kapt Deps.glideCompiler

    implementation Deps.retrofit
    implementation Deps.retrofitRxJavaAdapter
    implementation Deps.okhttp
    implementation Deps.okhttpLoggingInterceptor
    implementation Deps.retrofitConverterMoshi
    implementation Deps.moshi
    implementation Deps.moshiKotlin

    implementation Deps.rxAndroid
    implementation Deps.rxJava
    implementation Deps.rxKotlin

    implementation Deps.timber
    implementation Deps.multidex

    implementation Deps.navigationFragment
    implementation Deps.navigationUi

    implementation Deps.lifecycleExtensions
    kapt Deps.lifecycleCompiler
    implementation Deps.lifecycleReactivestreams

    implementation Deps.roomRuntime
    kapt Deps.roomCompiler
    implementation Deps.roomRx

    testImplementation Deps.junit
    testImplementation Deps.coreTesting
    testImplementation Deps.mockitoKotlin
    testImplementation Deps.mockitoInline
    testImplementation Deps.mockServer
    testImplementation Deps.robolectric

    androidTestImplementation Deps.testRunner
    androidTestImplementation Deps.testRule
    androidTestImplementation Deps.truth
    androidTestImplementation Deps.androidJunit
    androidTestImplementation Deps.espressoCore
}

def androidExclusion = [
        '**/R.class',
        '**/BR.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        'android/**',
        '**/Manifest*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        // Exclude unnecessary class
        '**/id/arieridwan/mvww/core/livedata/*.class',
        '**/id/arieridwan/mvww/core/reactivex/observer/*.class',
        '**/id/arieridwan/mvww/core/reactivex/schedulers/*.class',
        '**/id/arieridwan/mvww/core/state/*.class',
        '**/id/arieridwan/mvww/core/ui/*.class',
        '**/id/arieridwan/mvww/core/usecase/*.class',
        '**/id/arieridwan/mvww/data/network/response/*.class',
        '**/id/arieridwan/mvww/data/disk/entity/*.class',
        '**/id/arieridwan/mvww/di/*.class',
        '**/id/arieridwan/mvww/domain/mapper/*.class',
        '**/id/arieridwan/mvww/domain/repository/*.class',
        '**/id/arieridwan/mvww/domain/usecase/*Params.class',
        '**/id/arieridwan/mvww/presentation/model/*.class',
        '**/id/arieridwan/mvww/presentation/util/*.class',
        '**/id/arieridwan/mvww/presentation/**/*Adapter.class',
        '**/id/arieridwan/mvww/presentation/**/*ViewHolder.class',
        '**/id/arieridwan/mvww/presentation/*.class',
        '**/*Activity.class',
        '**/*Fragment.class',
]

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",  excludes: androidExclusion)

                sourceDirectories = files(["src/main/kotlin",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/kotlin"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}

task openUnitTestReport(type: Exec, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    commandLine "open", "$project.buildDir/reports/tests/testDebugUnitTest/index.html"
}

task openJacocoReport(type: Exec, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    commandLine "open", "$project.buildDir/reports/jacoco/createDebugUnitTestCoverageReport/html/index.html"
}