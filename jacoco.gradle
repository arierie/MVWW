def androidExclusion = [
        '**/R.class',
        '**/BR.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        'android/**',
        '**/Manifest*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        // Exclude unnecessary class
        '**/id/arieridwan/mvww/core/livedata/*.class',
        '**/id/arieridwan/mvww/core/reactivex/observer/*.class',
        '**/id/arieridwan/mvww/core/reactivex/schedulers/*.class',
        '**/id/arieridwan/mvww/core/state/*.class',
        '**/id/arieridwan/mvww/core/ui/*.class',
        '**/id/arieridwan/mvww/core/usecase/*.class',
        '**/id/arieridwan/mvww/data/network/response/*.class',
        '**/id/arieridwan/mvww/data/disk/entity/*.class',
        '**/id/arieridwan/mvww/di/*.class',
        '**/id/arieridwan/mvww/domain/mapper/*.class',
        '**/id/arieridwan/mvww/domain/repository/*.class',
        '**/id/arieridwan/mvww/domain/usecase/*Params.class',
        '**/id/arieridwan/mvww/presentation/model/*.class',
        '**/id/arieridwan/mvww/presentation/util/*.class',
        '**/id/arieridwan/mvww/presentation/**/*Adapter.class',
        '**/id/arieridwan/mvww/presentation/**/*ViewHolder.class',
        '**/id/arieridwan/mvww/presentation/*.class',
        '**/*Activity.class',
        '**/*Fragment.class',
]

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                classDirectories = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",  excludes: androidExclusion)

                sourceDirectories = files(["src/main/kotlin",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/kotlin"])

                println "ARIE" +
                        "config ${project.buildDir}/intermediates/classes/${sourcePath}" +
                        "${project.buildDir}/tmp/kotlin-classes/${sourcePath}"

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}

task openUnitTestReport(type: Exec, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    commandLine "open", "$project.buildDir/reports/tests/testDebugUnitTest/index.html"
}

task openJacocoReport(type: Exec, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    commandLine "open", "$project.buildDir/reports/jacoco/createDebugUnitTestCoverageReport/html/index.html"
}